@page "/R_Prestamos"
@page "/R_PRestamos/{PrestamoId:int}"

@using Prestamos_Blazor.Models;
@using Prestamos_Blazor.BLL;

@inject IToastService toast

<EditForm Model="prestamos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator/>

    <div class="card">
        <div class="card-header">
            <h3>Registro de Prestamos</h3>
        </div>

        <div class="card-body">
            <form>

                <div class="form-row align-items-center">
                    <div class="col">

                        <div class="form-group">
                            <label>PrestamoId</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="prestamos.PrestamoId" class="form-control col-4"></InputNumber>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>

                    </div>

                </div>


                <div class="form-group">
                    <label>Fecha</label>
                    <InputDate @bind-Value="prestamos.Fecha" class="form-control"></InputDate>
                </div>



                <div class="form-group">
                    <label>Persona</label>
                    <select class="form-control" @bind="prestamos.PersonaId" @onclick="LlenaCombo">
                        <option value="0">---Seleccione una persona---</option>

                        @foreach (var item in listapersonas)
                        {
                            <option value="@item.PersonaId">@item.Nombre</option>
                        }

                    </select>
                </div>



                <div class="form-group">
                    <label>Concepto</label>
                    <InputText @bind-Value="prestamos.Concepto" class="form-control"></InputText>
                    <ValidationMessage For="@(() => prestamos.Concepto)"></ValidationMessage>
                </div>

                <div class="form-group">
                    <label>Monto</label>
                    <InputNumber @bind-Value="prestamos.Monto" class="form-control"></InputNumber>
                    <ValidationMessage For="@(() => prestamos.Monto)"></ValidationMessage>
                </div>
 
            </form>

        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-success">Guardar</button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>

            </div>

        </div>

    </div>

</EditForm>



@code {


    [Parameter]
    public int PrestamoId { get; set; }

    private Prestamos prestamos = new Prestamos();



    private List<Personas> listapersonas = new List<Personas>();

    PersonaBLL personabll = new PersonaBLL();


    Personas personas = new Personas();

    private string PersonaSeleccionada { get; set; }




    protected override void OnInitialized()
    {

        listapersonas = personabll.GetList(e => true);
        Nuevo();
        Buscar();
        personas  = new Personas();
        base.OnInitialized();
    }



    private void Buscar()
    {


        if (prestamos.PrestamoId != 0)
        {
            var encontrado = PrestamoBLL.Buscar(prestamos.PrestamoId);

            if (encontrado != null)
            {
                this.prestamos = encontrado;
            }
            else
            {
                toast.ShowInfo("No Encontrado");
            }
        }

    }


    private void Nuevo()
    {
        this.prestamos = new Prestamos();
    }


    private void Guardar()
    {
        bool paso;

        paso = PrestamoBLL.Guardar(prestamos);

        if (paso)
        {
            toast.ShowSuccess("Guardado");
            Nuevo();

        }
        else
        {
            toast.ShowError("No Guardado");
        }


    }

    private void Eliminar()
    {
        bool paso;

        paso = PrestamoBLL.Eliminar(prestamos.PrestamoId);

        if (paso)
        {
            Nuevo();
            toast.ShowWarning("Eliminado");
        }
    }

    private void LlenaCombo()
    {
        try
        {
            personas = PersonaBLL.Buscar(Convert.ToInt32(PersonaSeleccionada));


        }catch (Exception)
        {

        }

    }


    //private void ListaPersona()       //Lista para llenar ComboBox Cliente
    //{
    //    List<Personas> listapersonas = personabll.GetList(a => true);
    //    this.PrestamoId = listapersonas;
    //}

    }
