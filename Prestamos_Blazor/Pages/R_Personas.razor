@page "/R_Personas"
@page "/R_Personas/{PersonaId:int}"


@inject IToastService toastService
@using Prestamos_Blazor.Models;
@using Prestamos_Blazor.BLL; 


<EditForm Model="personas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator/>


    <div class="card">
        <div class="card-header">
            <h3>Registro de Personas</h3>
        </div>

        <div class="card-body">
            <form>

                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>PersonaId</label>
                           <div class="input-group">
                            <InputNumber @bind-Value="personas.PersonaId" class="form-control col-4"></InputNumber>
                             <div class="input-group-append">

                                <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>

                             </div>

                           </div>

                        </div>

                    </div>

                </div>

                <div class="form-group">
                    <label>Nombre</label>
                    <InputText @bind-Value="personas.Nombre" class="form-control"></InputText>
                    <ValidationMessage For="@(() => personas.Nombre)"></ValidationMessage>
                </div>

                <div class="form-group">
                    <label>Teléfono</label>
                    <input @bind-value="personas.Telefono" type="text" class="form-control" pattern="\(\d{3}\)-\d{4}-\d{4}" placeholder="(000)-000-0000" />
                    <ValidationMessage For="@(() => personas.Telefono)"></ValidationMessage>
                </div>

                <div class="form-group">
                    <label>Cédula</label>
                    <input @bind-value="personas.Cedula" type="text" class="form-control" pattern="\(\d{3}\)-\d{4}-\d{4}" placeholder="000-0000000-0" />
                    <ValidationMessage For="@(() => personas.Cedula)"></ValidationMessage>
                </div>


                <div class="form-group">
                    <label>Dirección</label>
                    <InputText @bind-Value="personas.Direccion" class="form-control"></InputText>
                    <ValidationMessage For="@(() => personas.Direccion)"></ValidationMessage>
                </div>


                <div class="form-group">
                    <label>Fecha Nacimiento</label>
                    <InputDate @bind-Value="personas.FechaNacimiento" class="form-control"></InputDate>
                    <ValidationMessage For="@(() => personas.FechaNacimiento)"></ValidationMessage>
                </div>


                <div class="form-group">
                    <label>Balance</label>
                    <InputNumber @bind-Value="personas.Balance" class="form-control" Readonly="true" ></InputNumber>
                    
                </div>
               

            </form>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>

                    <button type="button"class="btn btn-primary" @onclick="Nuevo">Nuevo</button>

                    <button type="submit" class="btn btn-success">Guardar</button>

                    <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>

                </div>

            </div>


        </div>

    </div>


</EditForm>



@code {

    [Parameter]
    public int PersonaId { get; set; }


    private Personas personas = new Personas();


    protected override void OnInitialized()
    {

        Nuevo();
        Buscar();

        base.OnInitialized();
    }



    private void Buscar()
    {
        if (personas.PersonaId > 0)
        {
            var encontrado = PersonaBLL.Buscar(personas.PersonaId);

            if (encontrado != null)
            {
                this.personas = encontrado;
            }
            else
            {
                toastService.ShowWarning("No Encontrado");
            }
        }
    }

    private void Nuevo()
    {
        personas = new Personas();
    }


    private void Guardar()
    {
        bool paso;

        paso = PersonaBLL.Guardar(personas);

        if (paso)
        {
            Nuevo();
            toastService.ShowSuccess("Se Guardo");
        }
        else
        {
            toastService.ShowError("No se Guardo");
        }

    }


    private void Eliminar()
    {
        bool elimino;

        elimino = PersonaBLL.Eliminar(personas.PersonaId);

        if (elimino)
        {
            Nuevo();
            toastService.ShowWarning("Eliminado");

        }
        else
        {
            toastService.ShowError("No se elimino");
        }
    }
}
